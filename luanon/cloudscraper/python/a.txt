# a = bs4.BeautifulSoup(resp.content, "html.parser")
        # a = a.find('html')
        # inner_html = a.decode_contents().replace("\n", " ")
        # print(
        #     '''function SHA256(ascii) {    function rightRotate(value, amount) {        return (value >>> amount) | (value << (32 - amount));    };    var mathPow = Math.pow;    var maxWord = mathPow(2, 32);    var lengthProperty = "length";    var i, j;    var result = "";    var words = [];    var asciiBitLength = ascii[lengthProperty] * 8;    var hash = sha256.h = sha256.h || [];    var k = sha256.k = sha256.k || [];    var primeCounter = k[lengthProperty];    var isComposite = {};    for (var candidate = 2; primeCounter < 64; candidate++) {        if (!isComposite[candidate]) {            for (i = 0; i < 313; i += candidate) {                isComposite[i] = candidate;            };            hash[primeCounter] = (mathPow(candidate, .5) * maxWord) | 0;            k[primeCounter++] = (mathPow(candidate, 1 / 3) * maxWord) | 0;        };    };    ascii += "\x80";    while (ascii[lengthProperty] % 64 - 56) {        ascii += "\x00"    };    for (i = 0; i < ascii[lengthProperty]; i++) {        j = ascii.charCodeAt(i);        if (j >> 8) return;        words[i >> 2] |= j << ((3 - i) % 4) * 8;    };    words[words[lengthProperty]] = ((asciiBitLength / maxWord) | 0);    words[words[lengthProperty]] = (asciiBitLength);    for (j = 0; j < words[lengthProperty];) {        var w = words.slice(j, j += 16);        var oldHash = hash;        hash = hash.slice(0, 8);        for (i = 0; i < 64; i++) {            var i2 = i + j;            var w15 = w[i - 15],                w2 = w[i - 2];            var a = hash[0],                e = hash[4];            var temp1 = hash[7] +                (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) +                ((e & hash[5]) ^ ((~e) & hash[6])) +                k[i]                +                (w[i] = (i < 16) ? w[i] : (                    w[i - 16] +                    (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15 >>> 3)) +                    w[i - 7] +                    (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2 >>> 10))                ) | 0);            var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) +                ((a & hash[1]) ^ (a & hash[2]) ^ (hash[1] & hash[2]));            hash = [(temp1 + temp2) | 0].concat(hash);            hash[4] = (hash[4] + temp1) | 0;        };        for (i = 0; i < 8; i++) {            hash[i] = (hash[i] + oldHash[i]) | 0;        };    };    for (i = 0; i < 8; i++) {        for (j = 3; j + 1; j--) {            var b = (hash[i] >> (j * 8)) & 255;            result += ((b < 16) ? 0 : "") + b.toString(16);        };    };    return result;};'''
        #     + "window.sendRequest = function (url) {console.dir(JSON.stringify(window._cf_chl_ctx))};"
        #     + "var sha256 = SHA256;" +
        #     f"document.getElementsByTagName('html')[0].innerHTML = `{inner_html}`;" +
        #     "window._cf_chl_opt = ", json.dumps(_cf_chl_opt), ";" +
        #     "window._cf_chl_ctx = ", json.dumps(_cf_chl_ctx), ";" +
        #     utils.decode_output(resp1.text, _cf_chl_opt["cRay"]))
        #
        # img = re.search('\"(/img/.*?)\",', utils.decode_output(resp1.text, _cf_chl_opt["cRay"])).group(1)
        # img = utils.origin_join(utils.get_origin(resp1), "/cdn-cgi/challenge-platform/h/", _cf_chl_opt["cFPWv"], img)
        # w, h = utils.get_image_size(self.client, img)
        # print("w, h: ", w, h)
        # ff = input("=> ")
        # ff = re.sub('Ninjas>pirates,_\[_\[0\]\]/<debuggerevalcode:1:\d+_\[_\[0\]\]debuggerevalcod', "Ninjas>pirates,anonymous/_[_[0]]/<" + utils.get_origin(resp1) + "/cdn-cgi/challeng", ff)
        # ff = json.loads(ff)
        # for x, y in ff.items():
        #     if x.isdigit():
        #         if "ah" in y.keys() and "aw" in y.keys() and y['ah'] == -1 and y['aw'] == -1:
        #             print("th3 ok")
        #             ff[x]['ah'] = h
        #             ff[x]['aw'] = w
        #         if "Ninjas" in y.get("a", ""):
        #             ff[x]["a"] = "Ninjas>pirates,anonymous/_[_[0]]/<" + utils.get_origin(resp1) + "/cdn-cgi/challeng"
        # ff['chReq'] = _cf_chl_opt['cType']
        # ff['cNounce'] = _cf_chl_opt['cNounce']
        # ff['cRq'] = _cf_chl_opt['cRq']
        # ff['cvId'] = _cf_chl_opt['cvId']
        # ff['ffs'] = False
        # ff['ie'] = 0
        # ff['if'] = False
        # ff['oV'] = 1
        # print(json.dumps(ff))
        # print(json.dumps(_cf_chl_ctx))
        # exit()









            # a = soup.find('html')
            # inner_html = a.decode_contents().replace("\n", " ")
            # print(
            #     '''function SHA256(ascii) {    function rightRotate(value, amount) {        return (value >>> amount) | (value << (32 - amount));    };    var mathPow = Math.pow;    var maxWord = mathPow(2, 32);    var lengthProperty = "length";    var i, j;    var result = "";    var words = [];    var asciiBitLength = ascii[lengthProperty] * 8;    var hash = sha256.h = sha256.h || [];    var k = sha256.k = sha256.k || [];    var primeCounter = k[lengthProperty];    var isComposite = {};    for (var candidate = 2; primeCounter < 64; candidate++) {        if (!isComposite[candidate]) {            for (i = 0; i < 313; i += candidate) {                isComposite[i] = candidate;            };            hash[primeCounter] = (mathPow(candidate, .5) * maxWord) | 0;            k[primeCounter++] = (mathPow(candidate, 1 / 3) * maxWord) | 0;        };    };    ascii += "\x80";    while (ascii[lengthProperty] % 64 - 56) {        ascii += "\x00"    };    for (i = 0; i < ascii[lengthProperty]; i++) {        j = ascii.charCodeAt(i);        if (j >> 8) return;        words[i >> 2] |= j << ((3 - i) % 4) * 8;    };    words[words[lengthProperty]] = ((asciiBitLength / maxWord) | 0);    words[words[lengthProperty]] = (asciiBitLength);    for (j = 0; j < words[lengthProperty];) {        var w = words.slice(j, j += 16);        var oldHash = hash;        hash = hash.slice(0, 8);        for (i = 0; i < 64; i++) {            var i2 = i + j;            var w15 = w[i - 15],                w2 = w[i - 2];            var a = hash[0],                e = hash[4];            var temp1 = hash[7] +                (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) +                ((e & hash[5]) ^ ((~e) & hash[6])) +                k[i]                +                (w[i] = (i < 16) ? w[i] : (                    w[i - 16] +                    (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15 >>> 3)) +                    w[i - 7] +                    (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2 >>> 10))                ) | 0);            var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) +                ((a & hash[1]) ^ (a & hash[2]) ^ (hash[1] & hash[2]));            hash = [(temp1 + temp2) | 0].concat(hash);            hash[4] = (hash[4] + temp1) | 0;        };        for (i = 0; i < 8; i++) {            hash[i] = (hash[i] + oldHash[i]) | 0;        };    };    for (i = 0; i < 8; i++) {        for (j = 3; j + 1; j--) {            var b = (hash[i] >> (j * 8)) & 255;            result += ((b < 16) ? 0 : "") + b.toString(16);        };    };    return result;};'''
            #     + "window.sendRequest = function (url) {console.dir(JSON.stringify(window._cf_chl_ctx))};"
            #     + "var sha256 = SHA256;" +
            #     f"document.getElementsByTagName('html')[0].innerHTML = `{inner_html}`;" +
            #     "window._cf_chl_opt = ", json.dumps(_cf_chl_opt), ";" +
            #     "window._cf_chl_ctx = ", json.dumps(_cf_chl_ctx), ";" +
            #     output_decoded)
            #
            # img = re.search('\"(/img/.*?)\",', output_decoded).group(1)
            # img = utils.path_join("/cdn-cgi/challenge-platform/h/", _cf_chl_opt["cFPWv"], img)
            # w, h = utils.get_image_size(self.client, img)
            # print("w, h: ", w, h)
            # ff = json.loads(input("=> "))
            # for x, y in ff.items():
            #     if x.isdigit():
            #         if "ah" in y.keys() and "aw" in y.keys():
            #             print("th1 ok")
            #             ff[x]['ah'] = h
            #             ff[x]['aw'] = w
            #         if "Ninjas" in y.get("a", ""):
            #             print("th2 ok")
            #             ff[x]["a"] = "Ninjas>pirates,anonymous/_[_[0]]/<" + str(self.client.base_url) + "/cdn-cgi/challeng"
            # ff['chReq'] = _cf_chl_opt['cType']
            # ff['cNounce'] = _cf_chl_opt['cNounce']
            # ff['cRq'] = _cf_chl_opt['cRq']
            # ff['cvId'] = _cf_chl_opt['cvId']
            # ff['ffs'] = False
            # ff['ie'] = 25
            # ff['if'] = False
            # ff['oV'] = 1
            # print(json.dumps(ff))
















                    while True:






            _cf_chl_ctx = ScriptRunner(
                        self.client,
                        origin_resp.text,
                        output_decoded,
                        _cf_chl_opt,
                        _cf_chl_ctx
                    ).get_result(
                    )
            print(_cf_chl_ctx)

            data = f"v_{_cf_chl_opt['cRay']}={utils.encode_input(_cf_chl_ctx, secret_key)}"
            headers["Content-Length"] = str(len(data))
            resp2 = self.client.post(server_link, data=data, headers=headers)

            print(utils.decode_output(resp2.text, _cf_chl_opt["cRay"]))
            exit()


